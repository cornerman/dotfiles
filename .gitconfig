[user]
	name = johannes karoff
	email = johannes@karoff.net

[includeIf "gitdir:~/projects/priceloop/"]
    path = ~/projects/priceloop/.gitconfig

[core]
    whitespace = blank-at-eof,blank-at-eol,tab-in-indent,space-before-tab
    excludesfile = ~/.gitignore_global
    pager = less

[include]
    path = /home/cornerman/projects/dottr/yolk/git/gitconfig

[alias]
    head = rev-parse --short HEAD
    cot = "!TEMP=$(mktemp -d); f() { git worktree prune && git worktree add $TEMP $1 && zsh -c \"cd $TEMP; zsh\";}; f" # checkout branch in temporary directory
    un = reset HEAD
    una = "!git reset HEAD $(git rev-parse --show-toplevel 2> /dev/null)"
    prev = reset HEAD~1
    wip = "!git cama wip"
    stashu = stash save --include-untracked
    f = fetch
    fa = fetch --all
    p = push
    pt = push --tags
    pta = "!git push origin \"$(git rev-parse --abbrev-ref HEAD)\" --tags"
    pforce = push --force-with-lease
    u = pull --rebase --autostash
    a = add
    s = status
    po = "!git push --set-upstream origin \"$(git rev-parse --abbrev-ref HEAD)\""
    ci = commit
    cie = commit --amend
    cia = commit --amend --no-edit
    cm = commit -m
    cam = commit -am
    cama = "!git add -A; git commit -m"
    br = branch
    co = checkout
    cob = checkout -b
    rb = rebase
    rbc = rebase --continue
    rba = rebase --abort
    rbs = rebase --skip
    rbi = rebase -i
    mrc = merge --continue
    mra = merge --abort
    mrs = merge --skip
    cpp = cherry-pick
    cpc = cherry-pick --continue
    cpa = cherry-pick --abort
    cps = cherry-pick --skip
    dbr = "!f() { git branch -D $1 && git push origin :$1;}; f"
    d = diff --irreversible-delete --find-copies-harder --find-copies --ignore-space-at-eol --ignore-space-change --ignore-all-space --inter-hunk-context=2
    ds = diff --irreversible-delete --find-copies-harder --find-copies --ignore-space-at-eol --ignore-space-change --ignore-all-space --inter-hunk-context=2 --staged
    dw = diff --color-words='[A-Z][a-z]*|[a-z]+|[^[:space:]]' --irreversible-delete --find-copies-harder --find-copies --ignore-space-at-eol --ignore-space-change --ignore-all-space --inter-hunk-context=2
    dws = diff --color-words='[A-Z][a-z]*|[a-z]+|[^[:space:]]' --irreversible-delete --find-copies-harder --find-copies --ignore-space-at-eol --ignore-space-change --ignore-all-space --inter-hunk-context=2 --staged
    l = log
    ld = log -p
    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    la = log --graph --all --decorate --pretty=oneline --abbrev-commit
    ls = ls-files
    new = !sh -c 'git log $1@{1}..$1@{0} "$@"'
    graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

[color]
    status = auto
    interactive = auto
    branch = auto
    diff=auto

[push]
    default = current

[pull]
    ff = only
	rebase = true

[cherry-pick]
    ignore-space-change = true

[rebase]
    autoStash = true
    autoSquash = true # useful for `git commit --fixup <hash>` (https://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html)
    ignore-space-change = true

[diff]
    ignore-space-change = true

[blame]
    ignore-space-change = true

[merge]
    conflictstyle = diff3 # zdiff3
    ff = only
    ignore-space-change = true

[rerere]
    enabled = 1 # Reuse recorded resolution of conflicted merges: https://git-scm.com/docs/git-rerere

[diff]
    algorithm = histogram
    indentHeuristic = true
    wordRegex=[A-Z][a-z]*|[a-z]+|[^[:space:]] # see camel case as separate words

[commit]
    verbose = true

[apply]
    ignoreWhitespace = change # do not produce whitespace conflicts

[fetch]
    prune = true # remove old branches on fetch

[branch]
	autosetuprebase = always

[tig]
    vertical-split = true
    tab-size = 4
    ignore-space = all
    ignore-case = true ; search
    ; wrap-lines = true ; conflicts with stage-update-line
    editor-line-number = true
    mouse-scroll = true
    show-changes = true
    status-show-untracked-dirs = false

[tig "bind"]
    ;NEO
    generic = ä Quit
    generic = ü view-close
    generic = 8 move-up ; NEO right hand analog to arrow up
    generic = 5 move-down ; NEO right hand analog to arrow down

    generic = g move-first-line
    generic = G move-last-line
    main = G move-last-line ; overwrite default keybinding
    generic = F !git fetch
    generic = P !git push
    status = A !git commit --amend
    stage = u stage-update-line
    stage = <Home> stage-update-line ; NEO AltGr+u
    stage = U status-update
    status = U status-update
    stage = A !git commit --amend
    stage = C !git commit
    status = w !git fry word-based-diff
    status = W !git fry word-based-diff --staged
    stage = w !git fry word-based-diff %(file)
    stage = W !git fry word-based-diff --staged %(file)
    ; generic = C !git cherry-pick %(commit)

[filter "lfs"]
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process

[credential]
	helper = store
[init]
	defaultBranch = master
