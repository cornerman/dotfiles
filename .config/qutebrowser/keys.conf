# vim: ft=conf
#
# In this config file, qutebrowser's keybindings are configured.
# The format looks like this:
#
# [keymode]
#
# command
#   keychain
#   keychain2
#   ...
#
# All blank lines and lines starting with '#' are ignored.
# Inline-comments are not permitted.
#
# keymode is a comma separated list of modes in which the keybinding should be
# active. If keymode starts with !, the keybinding is active in all modes
# except the listed modes.
#
# For special keys (can't be part of a keychain), enclose them in `<`...`>`.
# For modifiers, you can use either `-` or `+` as delimiters, and these names:
#
#  * Control: `Control`, `Ctrl`
#  * Meta:    `Meta`, `Windows`, `Mod4`
#  * Alt:     `Alt`, `Mod1`
#  * Shift:   `Shift`
#
# For simple keys (no `<>`-signs), a capital letter means the key is pressed
# with Shift. For special keys (with `<>`-signs), you need to explicitely add
# `Shift-` to match a key pressed with shift.  You can bind multiple commands
# by separating them with `;;`.

[!normal]

leave-mode
    <Escape>
    <Ctrl-[>

[normal]
# Keybindings for normal mode.

search ""
    <Escape>

set-cmd-text -s :open
    o

set-cmd-text -s :open {url}
    O

set-cmd-text -s :open -t
    t

set-cmd-text :open -t {url}
    T

set-cmd-text -s :open -b
    ,t

set-cmd-text :open -b {url}
    ,T

set-cmd-text -s :open -w
    w

set-cmd-text :open -w {url}
    W

set-cmd-text -s :open gg
    go

set-cmd-text -s :open -t gg
    gO

tab-close
    d

tab-close -o
    D

tab-only
    U

tab-focus
    gt

tab-move
    gm

tab-move -
    ga

tab-move +
    gs

tab-next
    s

tab-prev
    a

tab-clone
    c

reload
    r

reload -f
    R

back
    h
    <Backspace>

back -t
    gh

back -w
    gH

forward
    l

forward -t
    gl

forward -w
    gL

fullscreen
    F5

spawn firefox {url}
    ,f

spawn chromium {url}
    ,F

spawn mpv {url}
    ,x

spawn --userscript ~/.config/qutebrowser/userscripts/pw.sh
    ,p

hint
    f

hint all tab
    F

hint all window
    ;w

hint all tab-bg
    ;b

hint all hover
    ;h

hint images
    ;i

hint images tab
    ;I

<unbound>
    .i

hint links fill ":open {hint-url}"
    ;f

hint links fill ":open -t {hint-url}"
    ;F

hint links fill ":open -b {hint-url}"
    ;B

hint links fill ":open -b {hint-url}"
    ;W

hint links fill ":spawn mpv {hint-url}"
    ;x

hint links yank
    ;y

<unbound>
    ;Y

hint links rapid
    ;r

hint links rapid-win
    ;R

hint links download
    ;d

scroll -50 0
    H

scroll 0 50
    j

scroll 0 -50
    k

scroll 50 0
    L

undo
    u

scroll-perc 0
    gg

scroll-perc
    G

search-next
    n

search-prev
    N

enter-mode insert
    i

yank
    y

<unbound>
    yY

<unbound>
    yt

<unbound>
    yT

paste
    p

<unbound>
    pP

paste -t
    P

<unbound>
    PP

<unbound>
    wp

quickmark-save
    m

set-cmd-text ":quickmark-load "
    b

set-cmd-text ":quickmark-load -t "
    B

<unbound>
    wb

save
    ,sv

open qute:settings
    ,S

set-cmd-text ":set "
    ,ss

set-cmd-text ":set -t "
    ,sl

set-cmd-text ":set keybind "
    ,sk

set general private-browsing true, private browsing enabled
    ,h

set general private-browsing false, private browsing disabled
    ,H

set content allow-javascript true, javascript enabled
    ,j

set content allow-javascript false, javascript disabled
    ,J

zoom-out
    -

zoom-in
    +

zoom
    =

navigate prev
    [[

navigate next
    ]]

navigate prev -t
    {{

navigate next -t
    }}

navigate up
    gu

navigate up -t
    gU

navigate increment
    <Ctrl-A>

navigate decrement
    <Ctrl-X>

inspector
    ,i

download-open;; download-remove
    ,o

download
    ,d

download-cancel
    ,D

view-source
    gf

spawn --userscript ~/.config/qutebrowser/userscripts/vim_edit_file.sh
    ge

spawn --userscript ~/.config/qutebrowser/userscripts/vim.sh
    gF

spawn --userscript ~/.config/qutebrowser/userscripts/dict.sh
    gd

tab-focus last
    <Ctrl-Tab>
    ,,

enter-mode passthrough
    <Ctrl-V>

quit
    <Ctrl-Q>

scroll-page 0 1
    <Ctrl-F>

scroll-page 0 -1
    <Ctrl-B>

scroll-page 0 0.5
    <Ctrl-D>

scroll-page 0 -0.5
    <Ctrl-U>

tab-focus 1
    <Alt-1>

tab-focus 2
    <Alt-2>

tab-focus 3
    <Alt-3>

tab-focus 4
    <Alt-4>

tab-focus 5
    <Alt-5>

tab-focus 6
    <Alt-6>

tab-focus 7
    <Alt-7>

tab-focus 8
    <Alt-8>

tab-focus 9
    <Alt-9>

home
    <Ctrl-h>

stop
    <Ctrl-s>

print
    <Ctrl-p>

[insert]
# Keybindings for insert mode.
# Since normal keypresses are passed through, only special keys are
# supported in this mode.
# Useful hidden commands to map in this section:
#  * `open-editor`: Open a texteditor with the focused field.

open-editor
    <Ctrl-E>

[hint]
# Keybindings for hint mode.
# Since normal keypresses are passed through, only special keys are
# supported in this mode.
# Useful hidden commands to map in this section:
#  * `follow-hint`: Follow the currently selected hint.

follow-hint
    <Return>

[passthrough]
# Keybindings for passthrough mode.
# Since normal keypresses are passed through, only special keys are
# supported in this mode.

[command]
# Keybindings for command mode.
# Since normal keypresses are passed through, only special keys are
# supported in this mode.
# Useful hidden commands to map in this section:
#  * `command-history-prev`: Switch to previous command in history.
#  * `command-history-next`: Switch to next command in history.
#  * `completion-item-prev`: Select previous item in completion.
#  * `completion-item-next`: Select next item in completion.
#  * `command-accept`: Execute the command currently in the commandline.

command-history-prev
    <Up>

command-history-next
    <Down>

completion-item-prev
    <Shift-Tab>

completion-item-next
    <Tab>

command-accept
    <Return>
    <Ctrl-J>
    <Shift-Return>

[prompt]
# Keybindings for prompts in the status line.
# You can bind normal keys in this mode, but they will be only active
# when a yes/no-prompt is asked. For other prompt modes, you can only
# bind special keys.
# Useful hidden commands to map in this section:
#  * `prompt-accept`: Confirm the entered value.
#  * `prompt-yes`: Answer yes to a yes/no question.
#  * `prompt-no`: Answer no to a yes/no question.

prompt-accept
    <Return>
    <Shift-Return>
    <Ctrl-J>

prompt-yes
    y

prompt-no
    n

[command,prompt]

rl-backward-char
    <Ctrl-B>

rl-forward-char
    <Ctrl-F>

rl-backward-word
    <Alt-B>

rl-forward-word
    <Alt-F>

rl-beginning-of-line
    <Ctrl-A>

rl-end-of-line
    <Ctrl-E>

rl-unix-line-discard
    <Ctrl-U>

rl-kill-line
    <Ctrl-K>

rl-kill-word
    <Alt-D>

rl-unix-word-rubout
    <Ctrl-W>

rl-yank
    <Ctrl-Y>

rl-delete-char
    <Ctrl-?>

rl-backward-delete-char
    <Ctrl-H>

